ans.1)-                       Web3.js vs Ether.j
web3.js and ether.js are both ethereum JavaScript libraries.
web3.js is developed and maintained by the ethereum foundation. so there is wider support for web3.js as more developers are behind it.
Ether.js is developed and maintained by Rick Moore-A Canadian developer.
one major difference between Ether.js and Web3.js is how they handle key management and interation with the Ethereum Blockchain.
Web3.js assumes that there is a local node connect to the applicaion.it's assumed that the node to store keys,signs transactions,and reads and interacts with the Ethereum Blockchain.
In reality, this is not often the case most users are not running geth locally.
Metamask effectively emulate that environment through a browser application,so most web3 apps require.
Metamask to hold keys, sign transaction,and interact with the Ethereum mainnet.

on the other hand,Ether.js takes a different apporach that we belive gives developer more flexibility.
Ether.js separates the "Node" into two separate roles:
1. a "Wallet" that holds keys and signs transaction, and
2. a "provider" that serves as an anonymous connection to the Ethereum network ,checking state and sending transactions.
 
ans2.)- 



soniy@DESKTOP-SL8EOL3 MINGW64 /e/web3.js
$ node
Welcome to Node.js v20.11.0.
Type ".help" for more information.
// Import web3 library 
> const Web3 = require('web3');
undefined
// Connect to your Ethereum node provider
> const web3= new Web3("https://mainnet.infura.io/v3/604e4b791c8e4a828929da1d8470b63c");
undefined
ABI(Application Binary Interface) of the smart contract
>  const abi=[
...     {
...       "constant": true,
...       "inputs": [],
...       "name": "getData",
...       "outputs": [{"name": "",
...    "type": "unit256"}],
...       "payable": false,
...       "stateMutability": "view",
...       "type": "function"
...     }
...   ];
undefined
//Addressof the deployed smart contract here
> const contractAddress="0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5";
undefined
//Create a contract instance
> const contract=new web3.eth.Contract(abi,contractAddress);
undefined
call a function in the smart contract to read data
> contract.methods.getData().call((err,result)=>{console.log(result)});
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 275,
  [Symbol(trigger_async_id_symbol)]: 6
}
        